/*****************************************************************************
*
*     Program: EPTlib
*     Author: Alessandro Arduino <a.arduino@inrim.it>
*
*  MIT License
*
*  Copyright (c) 2020-2021  Alessandro Arduino
*  Istituto Nazionale di Ricerca Metrologica (INRiM)
*  Strada delle cacce 91, 10135 Torino
*  ITALY
*
*  Permission is hereby granted, free of charge, to any person obtaining a copy
*  of this software and associated documentation files (the "Software"), to deal
*  in the Software without restriction, including without limitation the rights
*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*  copies of the Software, and to permit persons to whom the Software is
*  furnished to do so, subject to the following conditions:
*
*  The above copyright notice and this permission notice shall be included in all
*  copies or substantial portions of the Software.
*
*  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*  SOFTWARE.
*
*****************************************************************************/

#ifndef EPTLIB_MAIN_H_
#define EPTLIB_MAIN_H_

#include <array>
#include <fstream>
#include <string>

#define WALL @WALL@

struct software {
    static constexpr char name[] = "@EPTLIB_APP_NAME@";

    inline static std::string str() {
        return std::string(name);
    }
};

enum class EPTMethod {
    /// Helmholtz-based EPT
    HELMHOLTZ = 0,
    /// Convection-reaction EPT
    CONVREACT,
    /// Gradient EPT
    GRADIENT,
    /// Helmholtz-based EPT with pixel-wise optimised kernel shape
    HELMHOLTZ_CHI2,
    /// Fictitious EPT method
    END,
};
std::string ToString(const EPTMethod ept_method) {
    switch (ept_method) {
        case EPTMethod::HELMHOLTZ: return "Helmholtz EPT";
        case EPTMethod::CONVREACT: return "Convection-reaction EPT";
        case EPTMethod::GRADIENT: return "Gradient EPT";
        case EPTMethod::HELMHOLTZ_CHI2: return "Helmholtz EPT with optimised kernel";
    }
    return "";
}

enum class KernelShape {
    /// Cross
    CROSS = 0,
    /// Ellipsoid
    ELLIPSOID,
    /// Cuboid
    CUBOID,
    /// Fictitious shape
    END,
};
std::string ToString(const KernelShape kernel_shape) {
    switch (kernel_shape) {
        case KernelShape::CROSS: return "Cross";
        case KernelShape::ELLIPSOID: return "Ellipsoid";
        case KernelShape::CUBOID: return "Cuboid";
    }
    return "";
}

void StringReplace(std::string &str, const std::string &old_sub,
    const std::string &new_sub) {
    size_t idx = 0;
    size_t len_old = old_sub.size();
    size_t len_new = new_sub.size();
    while(true) {
        idx = str.find(old_sub,idx);
        if (idx==std::string::npos){
            break;
        }
        str.replace(idx,len_old,new_sub);
        idx += len_new;
    }
    return;
}

#endif  // EPTLIB_MAIN_H_
